
body {
    font-family: 'Segoe UI, Tahoma, sans-serif';
    /* The body tag is using Segoe UI as a main font,
        but it also has Tahoma as a backup in case Segoe is unavailable on someone's machine.
        If neither font is available, the default sans-serif font will be used.
        This is a CSS best practice known as web safe fonts.*/
}

h1,
h2 {
    text-align: center;
}

/* Font-family demonstration to apply to multiple elements at once. */

h1, h2, h3, h4, h5, h6 {
    font-family: Helvetica, Arial, sans-serif;
    /* small-caps font variant example: */
    font-variant: small-caps;
}

/* Paragraph */
p {
    color: navy;
}

/* NavBar */
nav {
    text-align: center;
    text-decoration: none;
}

/* Figure's (picture) caption */
figcaption {
    color: #032f0d;    
    background-color: #aef;
}

/* Class example */
.figcap {
    font-style: italic;
    font-size: 16pt;
    font-weight: bold;
}

.leftindent {
    /* text-indent: 5em; */
    padding-left: 5em;
}



/* >>> Styling to highlight block and inline elements differences */

#block1 {
    background-color: lightpink;
    text-align: center;
}

#sidenote1 {
    background-color: #ddd;      
}

#block2 {
    background-color: burlywood;
    text-align: center;
    display: inline;
}

#sidenote2 {
    background-color: #ddd;
    text-align: center;
    display: inline;
}

#sidenote3 {
    background-color: lightblue;
    text-align: center;
    display: inline;
    
}

/* _____________________________________________________*/

/* HYPERLINK - Changing default colors */

a {
    text-decoration: none;
    color: darkgreen;
}

a:active {
    color: #63f60a;
}

a:visited {
    color: #808080;
}

a:hover{                                        
    text-decoration: underline;
    font-weight: bold;

 }

/* ____________________________________ */

/* border color, style and width */
#sidenote4 {
    background-color: #ddd;
    display: inline;
    font-weight: bold;
    float: right;
    width: 100px;
    height: 50px;
    /* border-color: navy;
    border-style: solid;
    border-width: 0px;
    border-left-width: 2px;
    border-right-width: 2px; */

    /* short hand to set border values */
    border: 2px solid navy;
    margin-top: 5px;
}

/* ____________________________________ */

/* div (page width) */

#pagewidth{
    width: 1200px;
}

/* ____________________________________ */

/* MEDIA QUERY */

@media only screen and (max-width: 500px) {
    body{
        background-color: lightgoldenrodyellow;
    }
}


/* ____________________________________ */

footer {
    text-align: center;
}

/* Class that can only be applied to table cells */
td.vbot {
    /* vbot: short for vertical bottom */
    vertical-align: bottom;
    height: 30px;

}



/* 

>>> CLASS <<<

A style that can be applied to any tag and can be used as many times as you want.
Classes start with a dot. Eg.: 

.sale{

}

________________________________________________________________

>>> ID <<<

Similar to a Class, but should be used once per page.

IDs start with a pound symbol. Eg.:

#sidenote{

}

________________________________________________________________

>>> PSEUDO CLASS <<<

A class that applies specifically to a tag

Eg.: "a tag" has several pseudo tags, such as "visited", "active" and "hover".
     a{
        text-decoration: none;
        
     }

     **Here's the pseudo class:
     a:hover{                                        
        text-decoration: underline;
        font-weight: bold;

     }

________________________________________________________________

>>> PSEUDO ID <<<

________________________________________________________________

>>> COLORS <<<

The two main ways to assign a color to elements are through 
naming a color or through using hexadecimal colors.

To avoid potential confusion with different browsers, it is 
recommended to use HEXADECIMAL notation for colors.

     >> HEXADECIMAL COLORS:
        
        Hexadecimal numbers: 
        #000000 #FFFFFF

        0 represents black while F represents white.
        The 6 values are actually in 3 pairs which signify 
        the amount of red, green, and blue used in the color.

        Eg.: #FF0000 - This represents:
             All red (FF), no green (00), and no blue(00).

             #00FF00 represents:

             No red (00), all green (FF), and no blue (00).

            #000088 represents:

            No red (00), no green (00), and HALF blue (88).

            It is also possible to abbreviate: 

            #F00, #0F0, #008, #fff, #000.

            Only if each pair has the same value.

            Any hexadecimal number with a mathing number of pairs 
            is a shade of gray.
            Eg.: #dddddd or #e0e0e0 or #303030 or #414141 or #727272 or #333333 or #444444 ...
            The closer to O is darker and the closer to F is lighter.

________________________________________________________________

>>> FONT STYLE, SIZE AND WEIGHT <<<
    
    >> FONT-STYLE:
        Offers a selection of style, such as italic, normal, oblique... 

    >> FONT-SIZE:    
        Sets how big or how small the text is going to be.

    >> FONT-WEIGHT:
        Controls the boldness level of text.
        A lot of browsers supports 400 and 700 as measures od boldness,
        but nothing else. The safest way to use it is to set 
        the font-weight as "bold".
        (**Words are more consistent than numbers across browsers 
        when it comes to font weights**).
________________________________________________________________

>>> LINK COLORS <<<

HYPERLINKS have default colors:

     > blue is the color of a hyperlink that has not been visited.
     > red is the color of an active hyperlink that has been clicked.
     > purple is the color of a visited hyperlink.

For this reason it is recommended to avoid using blue, red and purple 
as text colors as users could confuse this text with hyperlinks.
It is also possible though to change the hyperlinks default colors and 
use other ones.

________________________________________________________________

>>> FONT VARIANT<<<

Simply put, the font-variant property can change text to be in 
the Small Caps style, meaning lowercase letters are in a 
uppercase style with a slightly reduced size.

________________________________________________________________

>>> TEXT DECORATION <<<

This property in CSS deals with text being underlined or not.

________________________________________________________________

>>> INDENTATION <<<

Controls the first-line text indent in a multiline paragraph.
To indent the entire paragraph it is necessary to use padding.
________________________________________________________________

>>> LINE HEIGHT <<<

This property sets the height of individual lines within an 
element. 
________________________________________________________________

>>> WORD-WRAP <<<

It is a CSS property that tells the browser how to display long 
words that over extend their parent element.

________________________________________________________________

>>> LETTER-SPACING || WORD-SPACING <<<

    >> LETTER SPACING
        Sets to the space between characters in a word.

    >> WORD-SPACING
        Sets the space between words.

________________________________________________________________

>>> BORDER-COLOR <<<

Similar to setting text colors: with named color or hexadecimal color.
In order to see a border, at a minimum a border-style property needs to be set.

________________________________________________________________

>>> BORDER-STYLE <<<

Control the overall look of a border. This is another property that 
is recommended to be tested across browsers.
________________________________________________________________

>>> BORDER-WIDTH <<<

Most browsers will display a border without border-width being set.
By using the border-width property the appearance can determined 
by the developer and not by the browser.
________________________________________________________________

>>> BACKGROUNDS <<<

There are two main types of backgrounds: 
    one set using colors, or one set using an image or images.
________________________________________________________________

>>> DIV <<<

Div tag can be used to control the width of an entire page.
The more fixed the layout is, the less fluid it iss across multiple devices.
________________________________________________________________

>>> UNITS OF MEASURE <<<

There are several different units of measure to use for sizing, 
margins, padding, and anything else requiring a measurement.

    em -> relative measurement equivalent to the font size that 
          is in use. 
          Eg.: 3em would be 3 times the size of the current font
    ex -> A measurement relative to the heigh of the letter x.
    px -> A measurement of 1/96 of an inch or 0.26 millimeters
          (can vary based on screen size)
    pt -> A measurement that is 1/72 of an inch or 0.35 millimeters.

Ruler Measurements:

    cm -> Centimeters
    in -> Inches
    mm -> Millimeters 

________________________________________________________________

>>> VIEWPORT <<<

This sets the content to be the width of the device width, 
scaled to normal size. The viewport meta tag works well on pages 
to where do not have to have a lot of objects with a large fixed
width size. In other words, is better to not use this meta tag on 
a page with large pictures as they won't scale well to different 
devices. 

________________________________________________________________

>>> RESPONSIVE WEB DESIGN <<<

To design websites to be responsive to different devices, mainly desktops
or laptops, tablets, and smartphones. Webpages should display as best as
possible with a minimum amount of effort. 
One way to accomplish this is to add a meta tag with a viewport setting. 
________________________________________________________________

>>> MEDIA QUERY <<<

A fairly granular way to control how a website displays across 
devices, is to use a media query. A media query is simply added 
to a stylesheet, to where it checks for screen width, and changes 
changes styles according to that screen width. 
It is possible to have two completely different layouts in one 
stylesheet file, with the media query determining which set 
of styles is used.

________________________________________________________________

>>> PERCENTAGES AND PIXELS <<<

When controlling measurements of elements on pages, the key is 
to make sure widths of elements do not exceed the screen width 
of a device. The #1 annoyance for most viewers of a webpage is 
having to scroll left and right to view the page.
Setting a fixed pixel measurement on and element, or use 
percentages to create fluidity with the element size in relation 
to the screen size, are ways to avoid exceeding the screen width.

________________________________________________________________

>>> FRAMEWORKS and TEMPLATES <<<

A CSS framework is a template you create, or one that you can 
download for free or purchase from a third-party, that has built-in
CSS that can be used to ease in development of a website.

csszengarden.com

As with obtaining anything from the web, though, check for any 
licensing requirements and/or restrictions. 
________________________________________________________________

>>> MAX-WIDTH PROPERTY <<<

A fluid measurement for an element can work well, but it 
can also look awkward on a screen with a very large resolution.
In the context of a responsive web design, max-width property 
can help fix that.
________________________________________________________________

>>> GRID <<<

Rely on tables or floats for positioning is not always easy.
With GRIDS developers can take far greater control over how the 
content displays across devices. 
Grid system is a series of columns and rows. These grids are 
organized within a parent container, or wrapper.
Using CSS Grids is a flexible means of organizing content by 
columns and rows, within a container (or wrapper). This grids 
support responsive web design and flexible layouts.
________________________________________________________________

>>> TIPS <<<

    - Max-width takes precedence over width.
    - PADDING property is used to indent an entire paragraph.
        
    (REVIEW)
    - **Different aspects of positioning 
    - **Difference between inline and block elements
    - **Difference between padding and margins
    - **Know when to use font-family, font-style, and font-weight, 
        text-alignment, text-decoration, and indentation
    - **Know how to use the different border and background elements
        (and roles of div tags)
    - **Know the aspects of responsive design::after    
        This includes units of measurement, media queries, 
        percentages vs. pixels, what frameworks are, and 
        the role of max-width property


________________________________________________________________

>>> WEB SAFE COMBINATION <<<

Some more common web safe font combinations:

    - Arial, Helvetica, sans-serif
    - Tahoma, Arial, sans-serif
    - Georgia, serif
    - Courier New, Courier, monospace
    - Lucinda Console, Monaco, monospace

    MONOSPACE >> All letters take up same space.
    SANS SERIF >> Fonts without decorative flourishes on their characters.
    SERIF >> Fonts with decorative flourishes on their characters.

________________________________________________________________

>>> CROSS-PLATFORM USABILITY <<<

It generally refers to a website ability to properly display and 
function across multiple browsers.
________________________________________________________________

>>> Separation Structure (HTML) and Style (CSS):

A clear separation between structure and styling makes the code
easier to edit and debug.
Use external sheets as much as possible to keep consistency within
a website and save time.
________________________________________________________________

>>> ACCESSIBILITY <<<

    -> Web Content Accessibility Guidelines (WCAG)
      It is a documentation that governs many of the web's accessibility 
      best practices. It helps to define a baseline for accessible 
      and adaptable web design.
      The document is updated frequently, but the sections listed 
      throughout the remainder of the accessibility domain should 
      not change.

------------------------

    -> 'alt' Attribute advantages:
        - Accessibility > Alternate text aids screen readers in 
                        providing accurate descriptions of content 
                        to visually impaired users.
                        Avoid alt text that is to long or too short.
                        Add enough for a context.
                        In the case of an image (eg.: logo) consider 
                        adding a blank alt attribute (alt=" "). 
                        Without the blank attribute, most screen 
                        readers wil read the entire URL for an 
                        image and that will have a negative effect 
                        on the user's experience. 
        - Image or video load failure > In case of a failure, the 
                        alternate text will show in the bos where
                        the failed image was positioned. This will
                        enable users to continue moving though the 
                        content. It also allows user to accurately 
                        report the error to developers.
        -Search engines> When search engines send out crawlers to 
                        help index the content all across the web,
                        these crawlers use the alt text attribute 
                        to help accurately index the website and 
                        more specifically, the images on it.
                        This makes your website easier to find.
                        
------------------------

     -> Color Contrast and Usage

        - Color contrast that is too high or low can negatively 
          affect accessibility.
          Low color contrast can make text and images very hard 
          to see while high contrast can cause eye strain and 
          readability issues as well.

------------------------   

     -> Legibility of Typography 

        - Factors to consider when styling your text:
          Default font size
          Font-type
          Font-weight
          Font-style
          Letter-spacing and word-spacing 
          Line-height
          Avoid using too many different fonts on single webpage.
          Always rely on the font-family property (with back up fonts).

------------------------
  

    -> Text resizing

        - The users resize text in their browser by adjusting 
            the zoom setting, or by changing the appearance settings. 
            
            ..When zooming in the page, make sure it doesn't 
            scroll horizontally. If it happens, it should be taken
            into consideration to change the positioning of 
            the elements.
            
            ..When changing the appearance setting (important to test!),
            the containers might not accommodate the text, and the text 
            can overflow on the boxes.            
            If you focus on relative measurements for your text
            and your containers, you can accommodate users that 
            rely on the browser  to resize fonts. 
            The element can stretch with the text, in a text box,
            when the height is not explicitly declared in the internal 
            stylesheet and the font is set to a relative measurement.

------------------------

     ->  CASCADING ISSUES 
        
        - The simplest way to deal with these issues is to use the 
            Developer Tools along with the knowledge that you have 
            about stylesheet precedence.
        - This should be enough to troubleshoot most of CSS issues.
        - Be aware that in more complex situations, there is CSS Specificity,
            a hierarchy that dictates the precedence of styles at an even 
            more granular level than just stylesheet precedence.
        - CSS has an *important* rule, this rule can be added after a 
            CSS property/value declaration.
            
            Eg.: 
                textbox1 { 
                    background-color: red !important; 
                }
            
            This keyword will cause the style to override any styles
            declared before it.
            It should be used with caution!
            If overused, it will compromise the effectiveness and 
            clarity of the CSS, making it difficult to work with.
            In most cases, you will be better off focusing on well structured 
            CSS with proper selectors.
        
________________________________________________________________


________________________________________________________________


________________________________________________________________


________________________________________________________________

________________________________________________________________


________________________________________________________________


________________________________________________________________

*/